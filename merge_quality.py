import argparse
import pandas as pd
import sys



def create_col_quality(df):
    '''Receives a df and retunrs a copy 
    including a new column including the
    Sample name generated by Index column'''

    df1 = df.copy()
    list_col_sample = []

    for i,row in df1.iterrows():
        sample = row['index'].split('v1.1.4.')[1].split('.qc')[0]
        list_col_sample.append(sample)

    df1['Sample'] = list_col_sample
    cols = df1.columns.tolist()
    new_cols = cols[-1:] + cols[:-1]
    df1 = df1[new_cols]

    return df1


def create_sample_epi(df_epi):
    '''Receives a df and 
    return a df with a new
    col (Sample)'''

    df2 = df_epi.copy()
    list_epi = []

    for i,row in df2.iterrows():

        if row['epirr_id'] == '--empty--':
            sample = row['epirr_id']
            list_epi.append(sample)
        
        else:
            sample = row['epirr_id'] + '.' + row['uuid']
            list_epi.append(sample)

    
    df2['Sample'] = list_epi
    cols = df2.columns.tolist()
    new_cols = cols[-1:] + cols[:-1]
    df2 = df2[new_cols]

    return df2


def merge_dfs(df_epi_sample, df_qual_sample, col):
    '''This function receives two dataframes 
    and returns a merged dataframe will all 
    rows (by left df)'''

    df_merged = df_epi_sample.merge(df_qual_sample,how='left', left_on=col, right_on=col)    
    
    return df_merged


def main():

    df_quality = pd.read_csv(args.quality)
    df_epi = pd.read_csv(args.epilap)
    df_qual_sample = create_col_quality(df_quality)
    df_epi_sample = create_sample_epi(df_epi)
    final_df = merge_dfs(df_epi_sample, df_qual_sample,'Sample')
    final_df.to_csv(args.out, index=False)


if __name__ == "__main__":

    parser = argparse.ArgumentParser(

        description="A script to merge the quality table from EpiAtlas and the EpiLaP prediction table"
    )

    parser.add_argument('-q', '--quality',
                        help='The absolut path to the quality metrics table',
                        required=True
                        )

    parser.add_argument('-e', '--epilap',
                        help='The absolut path to the epilap predicted table',
                        required=True
                        )

    parser.add_argument('-o', '--out',
                        help='The absolut path to the output table',
                        required=True
                        )                    
    
    args = parser.parse_args()
    


    main()